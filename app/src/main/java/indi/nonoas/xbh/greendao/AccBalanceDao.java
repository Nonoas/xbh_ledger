package indi.nonoas.xbh.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import indi.nonoas.xbh.pojo.AccBalance;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACC_BALANCE".
*/
public class AccBalanceDao extends AbstractDao<AccBalance, Long> {

    public static final String TABLENAME = "ACC_BALANCE";

    /**
     * Properties of entity AccBalance.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SerialNo = new Property(0, Long.class, "serialNo", true, "_id");
        public final static Property AccNo = new Property(1, String.class, "accNo", false, "ACC_NO");
        public final static Property Date = new Property(2, Integer.class, "date", false, "DATE");
        public final static Property UserId = new Property(3, String.class, "userId", false, "USER_ID");
        public final static Property AccName = new Property(4, String.class, "accName", false, "ACC_NAME");
        public final static Property Balance = new Property(5, String.class, "balance", false, "BALANCE");
    }


    public AccBalanceDao(DaoConfig config) {
        super(config);
    }
    
    public AccBalanceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACC_BALANCE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: serialNo
                "\"ACC_NO\" TEXT," + // 1: accNo
                "\"DATE\" INTEGER," + // 2: date
                "\"USER_ID\" TEXT," + // 3: userId
                "\"ACC_NAME\" TEXT," + // 4: accName
                "\"BALANCE\" TEXT);"); // 5: balance
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_ACC_BALANCE_ACC_NO_DESC_DATE_DESC ON \"ACC_BALANCE\"" +
                " (\"ACC_NO\" DESC,\"DATE\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACC_BALANCE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AccBalance entity) {
        stmt.clearBindings();
 
        Long serialNo = entity.getSerialNo();
        if (serialNo != null) {
            stmt.bindLong(1, serialNo);
        }
 
        String accNo = entity.getAccNo();
        if (accNo != null) {
            stmt.bindString(2, accNo);
        }
 
        Integer date = entity.getDate();
        if (date != null) {
            stmt.bindLong(3, date);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(4, userId);
        }
 
        String accName = entity.getAccName();
        if (accName != null) {
            stmt.bindString(5, accName);
        }
 
        String balance = entity.getBalance();
        if (balance != null) {
            stmt.bindString(6, balance);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AccBalance entity) {
        stmt.clearBindings();
 
        Long serialNo = entity.getSerialNo();
        if (serialNo != null) {
            stmt.bindLong(1, serialNo);
        }
 
        String accNo = entity.getAccNo();
        if (accNo != null) {
            stmt.bindString(2, accNo);
        }
 
        Integer date = entity.getDate();
        if (date != null) {
            stmt.bindLong(3, date);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(4, userId);
        }
 
        String accName = entity.getAccName();
        if (accName != null) {
            stmt.bindString(5, accName);
        }
 
        String balance = entity.getBalance();
        if (balance != null) {
            stmt.bindString(6, balance);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AccBalance readEntity(Cursor cursor, int offset) {
        AccBalance entity = new AccBalance( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // serialNo
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // accNo
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // accName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // balance
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AccBalance entity, int offset) {
        entity.setSerialNo(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setUserId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAccName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBalance(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AccBalance entity, long rowId) {
        entity.setSerialNo(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AccBalance entity) {
        if(entity != null) {
            return entity.getSerialNo();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AccBalance entity) {
        return entity.getSerialNo() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
